version: '3.8'

services:
  nginx:
    container_name: nginx
    build:
      context: ./proxy/
      dockerfile: Dockerfile
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - './backend:/app/'
      - './proxy/nginx-prod.conf:/etc/nginx/nginx.conf'
      - './proxy/certbot/www/:/var/www/certbot/'
      - './proxy/certbot/conf/:/etc/nginx/ssl'
    depends_on:
      - backend
      - frontend
    networks:
      - funny

  backend:
    build:
      context: ./backend/php/
      dockerfile: Dockerfile-production
      args:
        WWWUSER: 'laravel'
        WWWUID: '${WWWUID:-1000}'
    container_name: php
    user: '${WWWUID:-1000}:${WWWUID:-1000}' # Ensure container runs as laravel user
    healthcheck:
      test: ["CMD", "php", "-v"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - './backend:/app/'
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - funny
    env_file:
      - .env

  db:
    image: postgres:16
    container_name: db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - /mnt/fhdb/postgres_data:/var/lib/postgresql/data
    networks:
      - funny
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13.4-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    command: [ "sh", "-c", "rabbitmq-plugins enable rabbitmq_management && rabbitmq-server" ]
    networks:
      - funny
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 60s

  frontend:
    container_name: frontend
    build:
      context: ./frontend/client
      dockerfile: Dockerfile-prod
      args:
        - NODE_ENV=production
        - AXIOS_BASEURL=https://funny-how.com
        - AXIOS_BASEURL_CLIENT=https://funny-how.com
        - AXIOS_API_VERSION=/api/v1
        - GOOGLE_MAPS_API=${GOOGLE_MAPS_API:-default_map_key}
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - AXIOS_BASEURL=https://funny-how.com
      - AXIOS_BASEURL_CLIENT=https://funny-how.com
      - AXIOS_API_VERSION=/api/v1
      - NUXT_ENV_GOOGLE_MAPS_API=${GOOGLE_MAPS_API:-default_map_key}
    networks:
      - funny

  queue-worker:
    build:
      context: ./backend/php/
      dockerfile: Dockerfile-production
      args:
        WWWUSER: 'laravel'
        WWWUID: '${WWWUID:-1000}'
    container_name: queue-worker
    user: '${WWWUID:-1000}:${WWWUID:-1000}' # Ensure container runs as laravel user
    volumes:
      - './backend:/app/'
    depends_on:
      - backend
      - rabbitmq
      - db
    networks:
      - funny
    env_file:
      - .env
    command: >
      sh -c "
      sleep 10 &&
      php /app/artisan queue:work --sleep=3 --tries=3"
    restart: always

  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - funny

  chat:
    build:
      context: ./frontend/chat
      dockerfile: Dockerfile
    container_name: chat
    ports:
      - "6001:6001"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=${DB_HOST}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=5432
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
      - db
    networks:
      - funny

  scheduler:
    build:
      context: ./backend/php/
      dockerfile: Dockerfile-production
      args:
        WWWUSER: 'laravel'
        WWWUID: '${WWWUID:-1000}'
    container_name: scheduler
    user: '${WWWUID:-1000}:${WWWUID:-1000}' # Ensure container runs as laravel user
    volumes:
      - './backend:/app/'
    depends_on:
      - backend
      - rabbitmq
      - db
    networks:
      - funny
    env_file:
      - .env
    command: >
      sh -c "
      sleep 10 &&
      /usr/local/bin/cron-schedule.sh"
    restart: always

networks:
  funny:
    driver: bridge
