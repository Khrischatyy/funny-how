services:
  nginx:
    container_name: nginx
    build:
      context: ./proxy/
      dockerfile: Dockerfile
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - './backend:/app/'
      - './proxy/nginx-prod.conf:/etc/nginx/nginx.conf'
      - './proxy/certbot/www/:/var/www/certbot/'
      - './proxy/certbot/conf/:/etc/nginx/ssl'
    depends_on:
      - backend
      - frontend
    networks:
      - funny

  backend:
    build:
      context: ./backend/php/
      dockerfile: Dockerfile-production
      args:
        WWWUSER: 'laravel'
        WWWUID: '1000'
    container_name: php
    volumes:
      - './backend:/app/'
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - funny
    env_file:
      - .env
#    environment:
#      - AXIOS_BASEURL_CLIENT=https://funny-how.com
#      - SENTRY_DSN=${SENTRY_DSN}
#      - SENTRY_ENVIRONMENT=production

  db:
    image: postgres:16
    container_name: db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - /mnt/fhdb/postgres_data:/var/lib/postgresql/data
    networks:
      - funny

  rabbitmq:
    image: rabbitmq:3.13.4-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    command: [ "sh", "-c", "rabbitmq-plugins enable rabbitmq_management && rabbitmq-server" ]
    networks:
      - funny
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    container_name: frontend
    build:
      context: ./frontend/client
      dockerfile: Dockerfile-prod
      args:
        - NODE_ENV=production
        - AXIOS_BASEURL=https://funny-how.com
        - AXIOS_BASEURL_CLIENT=https://funny-how.com
        - AXIOS_API_VERSION=/api/v1
        - GOOGLE_MAPS_API=${GOOGLE_MAPS_API:-default_map_key}
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - AXIOS_BASEURL=https://funny-how.com
      - AXIOS_BASEURL_CLIENT=https://funny-how.com
      - AXIOS_API_VERSION=/api/v1
      - NUXT_ENV_GOOGLE_MAPS_API=${GOOGLE_MAPS_API:-default_map_key}
    networks:
      - funny

  queue-worker:
    build:
      context: ./backend/php/
      dockerfile: Dockerfile-production
      args:
        WWWUSER: 'laravel'
        WWWUID: '1000'
    container_name: queue-worker
    volumes:
      - './backend:/app/'
    depends_on:
      backend:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - funny
    env_file:
      - .env
    command: sh -c "php artisan queue:work --sleep=3 --tries=3"
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

networks:
  funny:
    driver: bridge